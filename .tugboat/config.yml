services:
  # What to call the service hosting the site.
  php:
    # Use PHP 7.x with Apache; this syntax pulls in the latest version of PHP 7
    image: tugboatqa/php:7.3-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building
    depends: mysql

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Install opcache and mod-rewrite.
        - docker-php-ext-install opcache
        - a2enmod headers rewrite alias

        # Install drush-launcher, if desired.
        - wget -O /usr/local/bin/drush https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar
        - chmod +x /usr/local/bin/drush

        # Link the document root to the expected path. This example links /web
        # to the docroot.
        - ln -snf "${TUGBOAT_ROOT}/web" "${DOCROOT}"

        # A common practice in many Drupal projects is to store the config and
        # private files outside of the Drupal root. If that's the case for your
        # project, you can either specify the absolute paths to those
        # directories in your settings.local.php, or you can symlink them in
        # here. Here is an example of the latter option:
        # - ln -snf "${TUGBOAT_ROOT}/config" "${DOCROOT}/../config"
        # - ln -snf "${TUGBOAT_ROOT}/files-private" "${DOCROOT}/../files-private"

        - echo "memory_limit = 256M" >> /usr/local/etc/php/conf.d/my-php.ini
        - echo "max_input_time = 120" >> /usr/local/etc/php/conf.d/my-php.ini
        - echo "max_execution_time = 300" >> /usr/local/etc/php/conf.d/my-php.ini
        - echo "post_max_size = 256M" >> /usr/local/etc/php/conf.d/my-php.ini
        - echo "upload_max_filesize = 256M" >> /usr/local/etc/php/conf.d/my-php.ini
        - echo "max_file_uploads = 20" >> /usr/local/etc/php/conf.d/my-php.ini


        # # Following https://blog.testery.io/configure-tugboat-to-run-cypress-tests-on-testery/
        # - apt-get update
        # - apt-get install python3
        # - apt-get install python3-pip
        # # Now clean up to save image container space
        # - apt-get clean
        # - rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Use the tugboat-specific Drupal settings.
        - cp "${TUGBOAT_ROOT}/.tugboat/settings.local.php" "${DOCROOT}/sites/default/"

        # Install/update packages managed by composer, including drush.
        - composer install --optimize-autoloader

        # Alternatively, another common practice is to use the
        # stage_file_proxy Drupal module. This module lets Drupal serve
        # files from another publicly-accessible Drupal site instead of
        # syncing the entire files directory into the Tugboat Preview.
        # This results in smaller previews and reduces the build time.
        # - composer require --dev drupal/stage_file_proxy
        # - vendor/bin/drush pm:enable --yes stage_file_proxy
        # - vendor/bin/drush config:set --yes stage_file_proxy.settings origin "http://www.example.com"

        # Set file permissions such that Drupal will not complain
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        - composer install --optimize-autoloader
        - vendor/bin/drush site-install
        - vendor/bin/drush cache:rebuild
        - vendor/bin/drush config:import -y

  # What to call the service hosting MySQL. This name also acts as the
  # hostname to access the service by from the php service.
  mysql:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mysql:5

    # A set of commands to run while building this service
    commands:
      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Copy a database dump from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use scp.
        # NORMALLY you would copy a backup into tugboat, but for this demo we are using an empty db in the repo itself
        # - curl https://raw.githubusercontent.com/NickStees/drupal8-starter/master/db.sql.gz -o db.sql.gz
        # - zcat db.sql.gz | mysql tugboat
        # - rm db.sql.gz
